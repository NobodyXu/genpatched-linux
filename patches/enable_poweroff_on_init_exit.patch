diff --git a/include/linux/reboot.h b/include/linux/reboot.h
index 3734cd8f3..09b1732fa 100644
--- a/include/linux/reboot.h
+++ b/include/linux/reboot.h
@@ -71,6 +71,8 @@ extern void kernel_restart(char *cmd);
 extern void kernel_halt(void);
 extern void kernel_power_off(void);
 
+extern void lock_system_transition_mutex(void);
+
 extern int C_A_D; /* for sysctl */
 void ctrl_alt_del(void);
 
diff --git a/kernel/exit.c b/kernel/exit.c
index 04029e35e..78b601130 100644
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@ -65,6 +65,10 @@
 #include <linux/compat.h>
 #include <linux/io_uring.h>
 
+/* Required for CONFIG_POWEROFF_ON_INIT_EXIT */
+#include <linux/reboot.h>
+#include <linux/fs.h>
+
 #include <linux/uaccess.h>
 #include <asm/unistd.h>
 #include <asm/mmu_context.h>
@@ -790,9 +794,19 @@ void __noreturn do_exit(long code)
 		 * If the last thread of global init has exited, panic
 		 * immediately to get a useable coredump.
 		 */
-		if (unlikely(is_global_init(tsk)))
+		if (unlikely(is_global_init(tsk))) {
+#ifdef CONFIG_POWEROFF_ON_INIT_EXIT
+            /*
+             * Lock the system_transition_mutex to prevent other process so that other process
+             * which calls reboot syscall won't trigger a race condition.
+             */
+            lock_system_transition_mutex();
+		    kernel_power_off();
+#else
 			panic("Attempted to kill init! exitcode=0x%08x\n",
 				tsk->signal->group_exit_code ?: (int)code);
+#endif
+        }
 
 #ifdef CONFIG_POSIX_TIMERS
 		hrtimer_cancel(&tsk->signal->real_timer);
diff --git a/kernel/reboot.c b/kernel/reboot.c
index eb1b15850..85f58493b 100644
--- a/kernel/reboot.c
+++ b/kernel/reboot.c
@@ -301,6 +301,12 @@ EXPORT_SYMBOL_GPL(kernel_power_off);
 
 DEFINE_MUTEX(system_transition_mutex);
 
+void lock_system_transition_mutex(void)
+{
+	mutex_lock(&system_transition_mutex);
+}
+EXPORT_SYMBOL_GPL(lock_system_transition_mutex);
+
 /*
  * Reboot system call: for obvious reasons only root may call it,
  * and even root needs to set up some magic numbers in the registers
diff --git a/usr/Kconfig b/usr/Kconfig
index 2599bc21c..f34ed4438 100644
--- a/usr/Kconfig
+++ b/usr/Kconfig
@@ -3,6 +3,16 @@
 # Configuration for initramfs
 #
 
+config POWEROFF_ON_INIT_EXIT
+    bool "Whether to poweroff if the init exits"
+    default n
+    help
+        If set to Y, then exit of init won't trigger kernel panic.
+
+        It would instead trigger emergency kernel poweroff, as if syscall reboot is called.
+
+        If you are not sure, say N.
+
 config INITRAMFS_SOURCE
 	string "Initramfs source file(s)"
 	default ""
